#!/bin/sh
# OpenLGTV BCM script rc.usb
# USB Storage Usage Script for LG Broadcom platform based TVs by xeros
# Source code released under GPL License

# Wait until connect usb drive
USB1_DIR=/mnt/usb1/Drive1
USB2_DIR=/mnt/usb2/Drive1
LOCKFILE=/var/run/rc.usb.lock
k=0;

if [ "$1" != "hotplug" ]
then
    echo "OpenLGTV_BCM-INFO: setting hotplug wrapper..."
    echo /scripts/hotplug-wrapper.sh > /proc/sys/kernel/hotplug
fi

echo "OpenLGTV_BCM-INFO: rc.usb starting..."
if [ -f "$LOCKFILE" ]
then
    echo "OpenLGTV_BCM-WARN: another rc.usb script instance is already handling action, exiting..."
    exit 0
fi

echo "OpenLGTV_BCM-INFO: rc.usb creating LOCKFILE: $LOCKFILE..."
touch "$LOCKFILE"

while [ -z "`cat /proc/mounts | grep ^/dev/sd`" ]
do
    sleep 1
    k=$(($k+1))
    if [ $k -gt 30 ]; then break; fi
done

for jj in 1 2 3 4
do
    for ii in 1 2
    do
	OpenLGTV_BCM_USB="/mnt/usb$ii/Drive$jj/OpenLGTV_BCM"
	[ -d "$OpenLGTV_BCM_USB" ] && break 2
    done
done
export OpenLGTV_BCM_USB
export USB_DIR=`echo $OpenLGTV_BCM_USB | sed 's#/OpenLGTV_BCM##g'`

for jj in 1 2 3 4
do
    for ii in 1 2
    do
	LGDTV_USB="/mnt/usb$ii/Drive$jj/LG_DTV"
	if [ -d "$LGDTV_USB" ]
	then
	    export LGDTV_USB
	    epaks="`ls $LGDTV_USB/*.epk 2>/dev/null`"
	    if [ -n "$epaks" ]
	    then
		LGDTV_upgrade=1
		echo "OpenLGTV_BCM-WARN: rc.usb: Found LG firmware upgrade epaks: $epaks"
		echo "OpenLGTV_BCM-WARN: rc.usb: Running in firmware upgrade mode - killing some services to free memory for upgrade"
		
		KILL='konfabulator lb4wk httpd nc udhcpc ntpd tcpsvd ls wget unzip zip djmount msdl'
		#KILL='addon_mgr stagecraft konfabulator lb4wk nc udhcpc ntpd tcpsvd ls wget djmount msdl'
		#KILL='addon_mgr stagecraft konfabulator lb4wk nc udhcpc ntpd tcpsvd ls wget djmount msdl RELEASE'
			# LG: addon_mgr stagecraft konfabulator lb4wk msdl RELEASE
			# OpenLGTV BCM: nc udhcpc telnetd httpd ntpd tcpsvd wget [djmount?]
			# OpenLGTV BCM - processes which might be running at boot: ls wget
		
		echo 'OpenLGTV_BCM-WARN: rc.usb: Freeing memory (killing daemons) ...'
		for prc in $KILL; do pkill $prc && echo "OpenLGTV_BCM-WARN: rc.usb: Stopping $prc ..."; killall $prc 2> /dev/null; done
		sleep 2
		
		# check free ram
		addfreemem=20480
		currfreemem=`free | grep Mem | awk '{print $4}'`
		currbuffmem=`free | grep Mem | awk '{print $6}'`
		curravailmem=$(($currfreemem + $currbuffmem))
		# expect size needed for epk in MB
		freemem_for_epak=$((($currfreemem - $addfreemem)/1024))
		#reqavailmem=$((2*$reqfreemem))
		
		echo "OpenLGTV_BCM-WARN: rc.usb: Free memory: ${currfreemem}, buffers: ${currbuffmem}, total available: ${curravailmem}"
		
		for epak in $epaks
		do
		    epk_size="`ls -lh $epak | awk '{print $5}' | sed -e 's/M//g' -e 's/\..*//g'`"
		    echo "OpenLGTV_BCM-WARN: rc.usb: epak: ${epak}, size: ${epk_size}M"
		    if [ "$freemem_for_epak" -lt "$epk_size" ]
		    then
			echo "OpenLGTV_BCM-WARN: rc.usb: not enough free mem for epak: ${epak}, epak size: ${epk_size}MB, mem available (with 20MB space reserved): ${freemem_for_epak}MB, freeing more memory by dropping caches..."
			echo 3 > /proc/sys/vm/drop_caches
			sleep 1
			echo "OpenLGTV_BCM-WARN: rc.usb: free memory after dropped caches: $((`free | grep Mem | awk '{print $4}'`/1024))"
		    fi
		done
	    fi
	    #break 2
	fi
    done
done
#export LGDTV_USB

if [ "$LGDTV_upgrade" = "1" ]
then
    echo "OpenLGTV_BCM-WARN: rc.usb: Finish USB actions without later checks to prevent of possible problems with LG upgrade."
    exit 0
fi

#/bin/date +"OpenLGTV_BCM-TIME: %F %T script: $0"
source /etc/rc.d/rc.usb-remount

if [ -d "$OpenLGTV_BCM_USB" ]
then
    echo "OpenLGTV_BCM-INFO: found OpenLGTV_BCM dir: $OpenLGTV_BCM_USB on mounted USB storage device in $k seconds..."
    echo "$USB_DIR" > /tmp/usbdir
    cur_dir=`pwd`
    if [ -d "$OpenLGTV_BCM_USB/upgrade" ]
    then
	#if [ -f "$OpenLGTV_BCM_USB/upgrade/OpenLGTV_BCM-v*.sqf" ]
	#then
	    [ "$platform" = "" -a -f "/mnt/user/etc/vars" ] && source /mnt/user/etc/vars
	    echo "OpenLGTV_BCM-INFO: found $OpenLGTV_BCM_USB/upgrade/ dir - trying to run OpenLGTV BCM $platform upgrade..."
	    sqf_file_count=`ls -al $OpenLGTV_BCM_USB/upgrade/OpenLGTV_BCM-$platform-v*.sqf 2>/dev/null | wc -l`
	    tarsh_file_count=`ls -al $OpenLGTV_BCM_USB/upgrade/OpenLGTV_BCM-$platform-v*.tar.sh 2>/dev/null | wc -l`
	    if [ "$sqf_file_count" -gt 1 -o "$tarsh_file_count" -gt 1 ]
	    then
		echo "OpenLGTV_BCM-WARN: theres too much OpenLGTV BCM upgrade (.sqf or .tar.sh) files in $OpenLGTV_BCM_USB/upgrade/, refusing to autoupgrade"
	    else
		if [ "$tarsh_file_count" -eq "1" ]
		then
		    tarsh_upgrade_file=`ls $OpenLGTV_BCM_USB/upgrade/OpenLGTV_BCM-$platform-v*.tar.sh`
		    echo "OpenLGTV_BCM-INFO: found $tarsh_upgrade_file file - trying use it for OpenLGTV BCM upgrade..."
		    curr_dir=`pwd`
		    cd $OpenLGTV_BCM_USB/upgrade/
		    #echo "OpenLGTV_BCM-INFO: unzipping $zip_upgrade_file file"
		    #unzip -o $zip_upgrade_file -d $OpenLGTV_BCM_USB/upgrade/
		    #echo "OpenLGTV_BCM-INFO: removing $zip_upgrade_file file"
		    #rm -f $zip_upgrade_file
		    $tarsh_upgrade_file autoupgrade
		    exit 0
		    #cd $curr_dir
		    #sqf_file_count=`ls -al $OpenLGTV_BCM_USB/upgrade/OpenLGTV_BCM-$platform-v*.sqf | wc -l`
		fi
		if [ "$tarsh_file_count" -lt "1" -a "$sqf_file_count" -lt "1" ]
		then
		    echo "OpenLGTV_BCM-INFO: there are no OpenLGTV BCM upgrade (.tar.sh or .sqf) files in $OpenLGTV_BCM_USB/upgrade/, nothing to upgrade"
		else
		    if [ "$sqf_file_count" -eq "1" ]
		    then
			sqf_upgrade_file=`ls $OpenLGTV_BCM_USB/upgrade/OpenLGTV_BCM-$platform-v*.sqf`
			if [ -f "$OpenLGTV_BCM_USB/upgrade/install.sh" ]
			then
			    echo "OpenLGTV_BCM-INFO: found $OpenLGTV_BCM_USB/upgrade/install.sh script, using it instead of builtin one"
			    $OpenLGTV_BCM_USB/upgrade/install.sh image=$sqf_upgrade_file autoupgrade
			else
			    /scripts/install.sh image=$sqf_upgrade_file autoupgrade
			fi
			exit 0
			#exit $?
		    fi
		fi
	    fi
        #fi
    fi
    if [ -f "$OpenLGTV_BCM_USB/make_backup" ]
    then
        echo "OpenLGTV_BCM-INFO: found $OpenLGTV_BCM_USB/make_backup file, starting backup to USB storage device..."
        /scripts/backup.sh $OpenLGTV_BCM_USB/backup
        mv -f $OpenLGTV_BCM_USB/make_backup $OpenLGTV_BCM_USB/make_backup.used
	#/bin/date +"OpenLGTV_BCM-TIME: %F %T script: $0"
    fi
    if [ -f "$OpenLGTV_BCM_USB/reset_config" ]
    then
	/scripts/reset_configs.sh
	exit 0
    fi
    if [ -d "$OpenLGTV_BCM_USB/ywedata" -o -d "$OpenLGTV_BCM_USB/ywe" -o -f "$OpenLGTV_BCM_USB/ywe.tar.gz" ]
    then
        echo "OpenLGTV_BCM-INFO: found at ywe or ywedata dirs or ywe.tar.gz file in $OpenLGTV_BCM_USB/ - executing Yahoo Widgets configs setup again"
        #umount /mnt/widget.data
        #mount --bind $OpenLGTV_BCM_USB/ywedata /mnt/widget.data
        #export ywe_usb_ywe_lg=1
        #export ywedata_usb_widget_data=1
        source /etc/rc.d/rc.ywe
	#/bin/date +"OpenLGTV_BCM-TIME: %F %T script: $0"
    fi
    if [ -d "$OpenLGTV_BCM_USB/autorun" ]
    then
        echo "OpenLGTV_BCM-INFO: executing custom autorun scripts from $OpenLGTV_BCM_USB/autorun/"
	for scr_autorun in $OpenLGTV_BCM_USB/autorun/*
	do
	    echo "OpenLGTV_BCM-INFO: executing $scr_file ..."
	    $scr_autorun
	    #/bin/date +"OpenLGTV_BCM-TIME: %F %T script: $0"
	done
    fi
    if [ -d "$OpenLGTV_BCM_USB/WebUI-devel" ]
    then
        echo "OpenLGTV_BCM-INFO: found $OpenLGTV_BCM_USB/WebUI-devel dir, mount-binding it to /var/www and restarting web servers..."
	mount --bind $OpenLGTV_BCM_USB/WebUI-devel /var/www
	killall httpd
	sleep 1
	echo "OpenLGTV_BCM-INFO: starting local httpd on 127.0.0.1:88"
	#httpd -h /var/www
	httpd -c /etc/httpd.conf -p 127.0.0.1:88 -h /var/www
	if [ -f "/mnt/user/etc/httpd.conf" ]
	then
	    echo "OpenLGTV_BCM-INFO: starting external httpd on 0.0.0.0:80 - connections need authentication"
	    httpd -c /mnt/user/etc/httpd.conf -p 0.0.0.0:80 -h /var/www -r "OpenLGTV BCM WebUI"
	else
	    echo "OpenLGTV_BCM-WARN: external httpd config in /mnt/user/etc/httpd.conf not found - you wont be able to connect to WebUI from PC"
	fi
	#/bin/date +"OpenLGTV_BCM-TIME: %F %T script: $0"
    fi
    /etc/rc.d/rc.mount-netshare
    #/bin/date +"OpenLGTV_BCM-TIME: %F %T script: $0"
    if [ ! -f "$OpenLGTV_BCM_USB/OpenLGTV_BCM-firstboot.log" ]
    then
        echo "OpenLGTV_BCM-INFO: making copy of firstboot $bootlogf log file to $OpenLGTV_BCM_USB/"
	cp -f $bootlogf $OpenLGTV_BCM_USB/OpenLGTV_BCM-firstboot.log
    fi
    echo "OpenLGTV_BCM-INFO: making copy of $bootlogf log file to $OpenLGTV_BCM_USB/"
    cp -f $bootlogf $OpenLGTV_BCM_USB/
else
    echo "OpenLGTV_BCM-INFO: there is no OpenLGTV_BCM dir on USB storage device"
fi
#/bin/date +"OpenLGTV_BCM-TIME: %F %T script: $0"

echo "OpenLGTV_BCM-INFO: rc.usb removing LOCKFILE: $LOCKFILE..."
rm -f "$LOCKFILE"
