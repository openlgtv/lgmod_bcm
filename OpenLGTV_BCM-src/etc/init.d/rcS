#!/bin/sh
# OpenLGTV BCM script
# New Init Script for LG Broadcom platform based TVs by xeros

#export PATH=/bin:/sbin:/usr/bin:/usr/sbin:.              # rcS default
#export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin # lginit default

# cmdline auto 2: 
# root=/dev/mtdblock3 lginit=/dev/mtdblock4 ro  rootfstype=squashfs appxip_addr=0x2600000 xipfs=22 mem=316M bmem=196M  autorun usbpwr  lcdmodules nouserinit lock_time=0 panic=0 lpj=201728 bcmrac=3 migration_cost=1000 bver=1.02.20 start_kernel=2793
# cmdline auto 4:
# root=/dev/mtdblock3  ro  rootfstype=squashfs mem=316M bmem=196M ip=192.168.0.2:192.168.0.1:192.168.0.1:255.255.255.0::eth0  usbpwr  lcdmodules  lock_time=0 panic=0 lpj=201728 bcmrac=3 migration_cost=1000 bver=1.02.20 start_kernel=4040

echo "OpenLGTV_BCM-INFO: variables initialization"
#export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:.
export PATH=.:/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin:/usr/local/sbin:/mnt/browser/bin:/mnt/addon/bin:/mnt/addon/stagecraft/bin:/scripts
#export LD_LIBRARY_PATH=/lib:/usr/lib:/usr/local/lib:/mnt/addon/lib:/mnt/addon/stagecraft/lib:/mnt/lg/res/lgres
export LD_LIBRARY_PATH=.:/lib:/usr/lib:/usr/local/lib:/mnt/lg/res/lgres:/mnt/browser/lib:/mnt/addon/lib:/mnt/addon/stagecraft/lib
export LOG_CALLER=NO
export OSAMEM_SIZE=0x200000
export LOAD_SYM=1
export HOOK_SEGV=YES
export IS_NFS=NO
export TERM=vt100
export ADDON_SYS_PATH=/mnt/addon
export ADDON_RES_PATH=/mnt/lg/res/lgfont
export ADDON_APP_CTRL=addon_mgr
export ADDON_APP_BATCH_LIST=addon_mgr.bat
export FLASH_APP_NAME=/mnt/addon/stagecraft/bin/stagecraft
export FLASH_YOUTUBE_PATH=/mnt/addon/contents/youtube/exec_youtube.swf
export FLASH_PICASA_PATH=/mnt/addon/contents/picasa/exec_picasa.swf
export FLASH_EMANUAL_PATH=/mnt/addon/contents/emanual/emmanager.swf
export ADDON_PRELOADED_PATH=/mnt/addon/contents
export HOME=/home
export DEPLOY_DIR=/mnt/browser

export TERMINFO_DIRS=/usr/share/terminfo

export ver=`cat /etc/ver2`
echo "OpenLGTV_BCM-INFO: OpenLGTV BCM rcS script ver. $ver starting..."

mount -t proc proc /proc

AUTORUN=`cat /proc/cmdline | grep autorun`

if [ "$AUTORUN" != "" ]
then

echo "OpenLGTV_BCM-INFO: starting in AUTORUN mode"

echo "OpenLGTV_BCM-INFO: system mounts..."
mount -t ramfs tmp /tmp
mount -t sysfs sysfs /sys
mount -t usbfs usbfs /proc/bus/usb
mount -t devpts devpts /dev/pts
mount -t tmpfs none /usr/etc
mount -t tmpfs bt /mnt/lg/bt -o size=10M

if [ "`cat /proc/mtd | wc -l`" = "39" -a "`grep mtd19 /proc/mtd | grep '\"ywedata\"' | wc -l`" = "1" ]
then
    echo "OpenLGTV_BCM-INFO: setting country_model to US..." | tee -a /tmp/OpenLGTV_BCM.log
    export country_model=US
else
    echo "OpenLGTV_BCM-INFO: setting country_model to EU..." | tee -a /tmp/OpenLGTV_BCM.log
    export country_model=EU
fi

echo "OpenLGTV_BCM-INFO: mtdblock partitions mounts..." | tee -a /tmp/OpenLGTV_BCM.log
mount -t squashfs /dev/mtdblock5 /mnt/lg/model
mount -t squashfs /dev/mtdblock10 /mnt/lg/res/lgres
mount -t squashfs /dev/mtdblock12 /mnt/lg/res/ezcal
mount -t squashfs /dev/mtdblock13 /mnt/lg/res/estreamer
mount -t squashfs /dev/mtdblock14 /usr/local
mount -t tmpfs tmpfs /usr/local/etc -o size=1M
mount -t squashfs /dev/mtdblock15 /mnt/addon

if [ "$country_model" = "EU" ]
then
    mount -t squashfs /dev/mtdblock23 /mnt/lg/ciplus/cert
    mount -t yaffs2 /dev/mtdblock24 /mnt/lg/ciplus/authcxt
fi

mount -t yaffs2 /dev/mtdblock7 /mnt/lg/cmn_data -o noatime
if [ "$?" -ne "0" ]
then
    echo "OpenLGTV_BCM-WARNING: problem mounting /dev/mtd7 - erasing it and trying again..." | tee -a /tmp/OpenLGTV_BCM.log
    flash_eraseall /dev/mtd7 >/dev/null 2>&1
    mount -t yaffs2 /dev/mtdblock7 /mnt/lg/cmn_data -o noatime
fi
mount --bind /mnt/lg/cmn_data /mnt/flash/data

if [ "$country_model" = "EU" ]
then
    mount -t jffs2 /dev/mtdblock25 /mnt/user
    mount -t squashfs /dev/mtdblock22 /mnt/idfile     # empty on EU fw, but lginit still tries to mount it
else
    mount -t jffs2 /dev/mtdblock18 /mnt/user
    mount -t squashfs /dev/mtdblock20 /mnt/idfile
fi
mount -t squashfs /dev/mtdblock16 /mnt/game
mount -t yaffs2 /dev/mtdblock17 /mnt/cache/flash -o noatime
if [ "$?" -ne "0" ]
then
    echo "OpenLGTV_BCM-WARNING: problem mounting /dev/mtd17 - erasing it and trying again..." | tee -a /tmp/OpenLGTV_BCM.log
    flash_eraseall /dev/mtd17 >/dev/null 2>&1
    mount -t yaffs2 /dev/mtdblock17 /mnt/cache/flash -o noatime
fi

if [ "$country_model" = "EU" ]
then
    mount -t squashfs /dev/mtdblock18 /mnt/browser
    mount -t yaffs2 /dev/mtdblock19 /mnt/cache/browser
    if [ "$?" -ne "0" ]
    then
	echo "OpenLGTV_BCM-WARNING: problem mounting /dev/mtd19 - erasing it and trying again..." | tee -a /tmp/OpenLGTV_BCM.log
	flash_eraseall /dev/mtd19 >/dev/null 2>&1
	mount -t yaffs2 /dev/mtdblock19 /mnt/cache/browser
    fi
    mount --bind /mnt/cache/browser /home
    ln -sf /mnt/browser/.mozilla /mnt/cache/browser/.mozilla
    if [ -f "/mnt/cache/browser/browser_application.txt" ]
    then
	echo "OpenLGTV_BCM-INFO: found /mnt/cache/browser/browser_application.txt file, copying from /mnt/browser/ ..." | tee -a /tmp/OpenLGTV_BCM.log
	rm -f /mnt/cache/browser/browser_application.txt
	cp /mnt/browser/browser_application.txt /mnt/cache/browser/ #shouldnt be addon instead of browser? but thats from the lginit code (lginit bug?)
    fi
else
    mount -t yaffs2 /dev/mtdblock19 /mnt/widget.data # US fw lginit does not handle erasing ywedata if it's not mountable
fi

if [ -n "`grep appxip_addr /proc/cmdline`" ]
then
    appxip_addr=`cat /proc/cmdline | sed 's/ /\n/g' | grep appxip_addr | cut -d= -f 2`
    echo "OpenLGTV_BCM-INFO: mounting LGAPP partition as XIP CRAMFS, memory address: $appxip_addr" | tee -a /tmp/OpenLGTV_BCM.log
    #mount -t cramfs lgapp_xip /mnt/lg/lgapp -o physaddr=0x2600000
    mount -t cramfs lgapp_xip /mnt/lg/lgapp -o physaddr=$appxip_addr
else
    echo "OpenLGTV_BCM-INFO: mounting LGAPP partition as SQUASHFS" | tee -a /tmp/OpenLGTV_BCM.log
    mount -t squashfs /dev/mtdblock9 /mnt/lg/lgapp
fi

if [ -n "`grep fontxip_addr /proc/cmdline`" ]
then
    fontxip_addr=`cat /proc/cmdline | sed 's/ /\n/g' | grep fontxip_addr | cut -d= -f 2`
    echo "OpenLGTV_BCM-INFO: mounting LGFONT partition as XIP CRAMFS, memory address: $fontxip_addr" | tee -a /tmp/OpenLGTV_BCM.log
    mount -t cramfs lgfont_xip /mnt/lg/res/lgfont -o physaddr=$fontxip_addr
else
    echo "OpenLGTV_BCM-INFO: mounting LGFONT partition as SQUASHFS" | tee -a /tmp/OpenLGTV_BCM.log
    mount -t squashfs /dev/mtdblock11 /mnt/lg/res/lgfont
fi

# mount partitons (/etc/fstab)
#mount -a			# rcS default
#mount --bind /mnt/flash/data	/mnt/lg/recdb

#export HOOK_SEGV=YES		# rcS default
#export LOG_CALLER=YES		# rcS default
#export LOAD_SYM=1		# rcS default
#export OSAMEM_SIZE=0x200000	# rcS default

if [ ! -f "/mnt/flash/data/resolv.conf" ]
then
    echo "OpenLGTV_BCM-INFO: creating empty /mnt/flash/data/resolv.conf file" | tee -a /tmp/OpenLGTV_BCM.log
    touch /mnt/flash/data/resolv.conf
fi

if [ ! -f "/mnt/flash/data/hosts" ]
then
    echo "OpenLGTV_BCM-INFO: creating empty /mnt/flash/data/hosts file" | tee -a /tmp/OpenLGTV_BCM.log
    touch /mnt/flash/data/hosts
fi

#
# Network parameters
#

echo "OpenLGTV_BCM-INFO: creating dirs in /tmp/ for logs and /var temporary data" | tee -a /tmp/OpenLGTV_BCM.log
mkdir -p /tmp/run /tmp/log /tmp/service /tmp/lib/hwclock /tmp/lib/misc /tmp/spool/cron
cat /dev/null > /var/run/utmp
cat /dev/null > /var/log/wtmp
cat /dev/null > /var/log/lastlog
chgrp utmp /var/run/utmp /var/log/wtmp
chmod 0664 /var/run/utmp /var/log/wtmp
mv /tmp/OpenLGTV_BCM.log /var/log/

echo "OpenLGTV_BCM-INFO: starting network setup..." | tee -a /var/log/OpenLGTV_BCM.log
network_set=0
if [ -n "`cat /proc/cmdline | grep ip=`" ]
then
    echo "OpenLGTV_BCM-INFO: using static network setup from kernel cmdline set from CFE" | tee -a /var/log/OpenLGTV_BCM.log
    TARGET_IP=$(cat /proc/cmdline | awk 'BEGIN { RS="[ :]"; FS="="; } /ip=/ { print $2 } END {}')
    SERVER_IP=$(cat /proc/cmdline | awk 'BEGIN { RS="[ ]"; FS=":"; } /ip=/ { print $2 } END {}')
    GATEWAY=$(cat /proc/cmdline | awk 'BEGIN { RS="[ ]"; FS=":"; } /ip=/ { print $3 } END {}')
    NETMASK=$(cat /proc/cmdline | awk 'BEGIN { RS="[ ]"; FS=":"; } /ip=/ { print $4 } END {}')
    network_set=1
else
    if [ -f "/mnt/flash/data/nm.rc" ]
    then
	if [ "`cat /mnt/flash/data/nm.rc | grep DHCP | awk -F= '{print $2}'`" -eq "0" ]
	then
	    echo "OpenLGTV_BCM-INFO: using static network setup from NetworkManager config" | tee -a /var/log/OpenLGTV_BCM.log
	    TARGET_IP=`cat /mnt/flash/data/nm.rc | grep IP_Address | awk '{FS="="; print $2}'`
	    SERVER_IP=`cat /mnt/flash/data/nm.rc | grep IP_Gateway | awk '{FS="="; print $2}'` 
	    # we wont get server ip from NetworkManager config, so lets get gateway address instead
	    GATEWAY=`cat /mnt/flash/data/nm.rc | grep IP_Gateway | awk '{FS="="; print $2}'`
	    NETMASK=`cat /mnt/flash/data/nm.rc | grep IP_Netmask | awk '{FS="="; print $2}'`
	    network_set=1
	else
	    network_set=0
	fi
    else
	echo "OpenLGTV_BCM-INFO: could not determine network setup, using defaults" | tee -a /var/log/OpenLGTV_BCM.log
	TARGET_IP=192.168.100.99 # if we cant get network config settings lets set some defaults
	SERVER_IP=192.168.100.1
	GATEWAY=192.168.100.1
	NETMASK=255.255.255.0
	network_set=1
    fi
fi

#
# Network setting
#
ifconfig lo 127.0.0.1 netmask 255.0.0.0
if [ "$network_set" -eq "1" ]
then
    echo "OpenLGTV_BCM-INFO: TARGET_IP: $TARGET_IP SERVER_IP: $SERVER_IP GATEWAY: $GATEWAY NETMASK: $NETMASK" | tee -a /var/log/OpenLGTV_BCM.log
    ifconfig eth0 $TARGET_IP netmask $NETMASK up
    route add default gw $GATEWAY
else
    echo "OpenLGTV_BCM-INFO: connecting to DHCP server for network setup" | tee -a /var/log/OpenLGTV_BCM.log
    udhcpc eth0
fi

magic=hsqs
magic_clean=377377377377

if [ "`head -c4 /dev/mtd4 | od -c | head -n1 | awk '{print $2 $3 $4 $5}'`" != "$magic_clean" ]
then
    echo "OpenLGTV_BCM-WARN: lginit partition (mtd4) is not clean, erasing it..." | tee -a /var/log/OpenLGTV_BCM.log
    flash_eraseall /dev/mtd4 2>&1 | tee -a /var/log/OpenLGTV_BCM.log
fi

if [ "$country_model" = "EU" ]
then
    if [ "`head -c4 /dev/mtd27 | od -c | head -n1 | awk '{print $2 $3 $4 $5}'`" != "$magic_clean" ]
    then
	echo "OpenLGTV_BCM-WARN: lginit backup partition (mtd27) is not clean, erasing it..." | tee -a /var/log/OpenLGTV_BCM.log
	flash_eraseall /dev/mtd27 2>&1 | tee -a /var/log/OpenLGTV_BCM.log
    fi
else
    if [ "`head -c4 /dev/mtd25 | od -c | head -n1 | awk '{print $2 $3 $4 $5}'`" != "$magic_clean" ]
    then
	echo "OpenLGTV_BCM-WARN: lginit backup partition (mtd25) is not clean, erasing it..." | tee -a /var/log/OpenLGTV_BCM.log
	flash_eraseall /dev/mtd25 2>&1 | tee -a /var/log/OpenLGTV_BCM.log
    fi
fi

echo "OpenLGTV_BCM-INFO: setting time via NTP server pool" | tee -a /var/log/OpenLGTV_BCM.log
ntpclient -h pool.ntp.org -s -c 1 > /dev/null 2>&1 &

mkdir -p /mnt/user/etc
if [ $? -ne 0 ]
then
    echo "OpenLGTV_BCM-ERROR: /mnt/user not writable??? lets create tmpfs there then to not break boot process" | tee -a /var/log/OpenLGTV_BCM.log
    mount -t tmpfs tmpfs /mnt/user
fi
if [ ! -f "/usr/etc/passwd" ]
then
    #mount -t tmpfs none /usr/etc
    if [ -f "/mnt/user/etc/passwd" ]
    then
        echo "OpenLGTV_BCM-INFO: using /mnt/user/etc/passwd file" | tee -a /var/log/OpenLGTV_BCM.log
	#cp /mnt/user/etc/passwd /usr/etc/passwd
	ln -sf /mnt/user/etc/passwd /usr/etc/passwd
    else
        echo "OpenLGTV_BCM-WARN: creating /mnt/user/etc/passwd file based on default one" | tee -a /var/log/OpenLGTV_BCM.log
	#cp /etc/passwd.org /usr/etc/passwd
	cp /etc/passwd.org /mnt/user/etc/passwd
	ln -sf /mnt/user/etc/passwd /usr/etc/passwd
    fi
fi
if [ ! -f "/usr/etc/shadow" ]
then
    if [ -f "/mnt/user/etc/shadow" ]
    then
        echo "OpenLGTV_BCM-INFO: using /mnt/user/etc/shadow file" | tee -a /var/log/OpenLGTV_BCM.log
	#cp /mnt/user/etc/shadow /usr/etc/shadow
	ln -sf /mnt/user/etc/shadow /usr/etc/shadow
    else
        echo "OpenLGTV_BCM-WARN: creating /mnt/user/etc/shadow file based on default one" | tee -a /var/log/OpenLGTV_BCM.log
	#cp /etc/shadow.org /usr/etc/shadow
	cp /etc/shadow.org /mnt/user/etc/shadow
	ln -sf /mnt/user/etc/shadow /usr/etc/shadow
    fi
fi

# check if all users have their passwords enabled if they have set any already
if [ -n "`grep '::' /mnt/user/etc/passwd 2> /dev/null`" ]
then
    for i in `grep '\\$' /mnt/user/etc/shadow | awk -F: '{print $1}'`
    do
	user_fix=`grep "^$i::" /mnt/user/etc/passwd | awk -F: '{print $1}'`
	if [ "$user_fix" != "" ]
	then
	    echo "OpenLGTV_BCM-WARN: enable password for user $user_fix in passwd file..." | tee -a /var/log/OpenLGTV_BCM.log
	    sed -i -e "s/^$user_fix::/$user_fix:x:/g" /mnt/user/etc/passwd
	fi
    done
fi


if [ ! -d /usr/etc/dropbear ]
then
    if [ -d /mnt/user/etc/dropbear ]
    then
        echo "OpenLGTV_BCM-INFO: using /mnt/user/etc/dropear path for SSH host keys" | tee -a /var/log/OpenLGTV_BCM.log
	#cp -r /mnt/user/etc/dropbear /usr/etc/
	ln -sf /mnt/user/etc/dropbear /usr/etc/dropbear
    else
        echo "OpenLGTV_BCM-WARN: generating new SSH host keys in /mnt/user/etc/dropear path" | tee -a /var/log/OpenLGTV_BCM.log
	mkdir -p /mnt/user/etc/dropbear
	dropbearkey -t dss -f /mnt/user/etc/dropbear/dropbear_dss_host_key
	dropbearkey -t rsa -f /mnt/user/etc/dropbear/dropbear_rsa_host_key
	#cp -r /mnt/user/etc/dropbear /usr/etc/
	ln -sf /mnt/user/etc/dropbear /usr/etc/dropbear
    fi
fi
if [ ! -f "/usr/etc/motd" ]
then
    if [ -f "/mnt/user/etc/motd" ]
    then
        echo "OpenLGTV_BCM-INFO: using /mnt/user/etc/motd file" | tee -a /var/log/OpenLGTV_BCM.log
	#cp /mnt/user/etc/shadow /usr/etc/shadow
	ln -sf /mnt/user/etc/motd /usr/etc/motd
    else
        echo "OpenLGTV_BCM-WARN: creating /mnt/user/etc/motd file based on default one" | tee -a /var/log/OpenLGTV_BCM.log
	#cp /etc/motd.org /usr/etc/motd
	cp /etc/motd.org /mnt/user/etc/motd
	ln -sf /mnt/user/etc/motd /usr/etc/motd
    fi
fi
if [ -f "/mnt/user/etc/motd" ]
then
    ver_old=`cat /mnt/user/etc/motd | grep "Welcome to OpenLGTV BCM ver." | awk -F"ver. " '{print $2}' | sed 's/!//g'`
    if [ -n "$ver_old" ]
    then
        echo "OpenLGTV_BCM-INFO: setting correct OpenLGTV BCM version ($ver) in /tmp/motd file" | tee -a /var/log/OpenLGTV_BCM.log
	if [ "$ver_old" != "$ver" ]
	then
	    cat /mnt/user/etc/motd | sed "s/Welcome to OpenLGTV BCM ver.*/Welcome to OpenLGTV BCM ver. $ver/g" > /tmp/motd
	fi
    else
        echo "OpenLGTV_BCM-WARN: OpenLGTV BCM welcome string not found in /tmp/motd file" | tee -a /var/log/OpenLGTV_BCM.log
	cat /mnt/user/etc/motd > /tmp/motd
    fi
fi
echo "OpenLGTV_BCM-INFO: starting portmapper..." | tee -a /var/log/OpenLGTV_BCM.log
portmap &
echo "OpenLGTV_BCM-INFO: starting telnet server..." | tee -a /var/log/OpenLGTV_BCM.log
telnetd &
echo "OpenLGTV_BCM-INFO: starting dropbear SSH server..." | tee -a /var/log/OpenLGTV_BCM.log
dropbear
echo "OpenLGTV_BCM-INFO: setting hostname to OpenLGTV_BCM..." | tee -a /var/log/OpenLGTV_BCM.log
hostname OpenLGTV_BCM

# Mount-binding btusb.ko from /mnt/user/modules/
if [ -f "/mnt/user/modules/btusb.ko" ]
then
    echo "OpenLGTV_BCM-INFO: binding /mnt/user/modules/btusb.ko to /mnt/lg/res/lgres/btusb.ko..." | tee -a /var/log/OpenLGTV_BCM.log
    mount --bind /mnt/user/modules/btusb.ko /mnt/lg/res/lgres/btusb.ko
fi

# Mount-binding wl.ko from /mnt/user/modules/
if [ -f "/mnt/user/modules/wl.ko" ]
then
    echo "OpenLGTV_BCM-INFO: binding /mnt/user/modules/wl.ko to /mnt/lg/res/lgres/wl.ko..." | tee -a /var/log/OpenLGTV_BCM.log
    mount --bind /mnt/user/modules/wl.ko /mnt/lg/res/lgres/wl.ko
fi

source /etc/rc.d/rc.netcast

if [ ! -d /mnt/user/www ]
then
    echo "OpenLGTV_BCM-INFO: creating /mnt/user/www dir for builtin web server..." | tee -a /var/log/OpenLGTV_BCM.log
    mkdir -p /mnt/user/www
fi

# Making nvram copy
if [ "$country_model" = "EU" ]
then
    echo "OpenLGTV_BCM-INFO: making NVRAM copy from /dev/mtd21 partition..." | tee -a /var/log/OpenLGTV_BCM.log
    cat /dev/mtd21 > /tmp/nvram
else
    echo "OpenLGTV_BCM-INFO: making NVRAM copy from /dev/mtd23 partition..." | tee -a /var/log/OpenLGTV_BCM.log
    cat /dev/mtd23 > /tmp/nvram
fi

(sleep 30; /etc/rc.d/rc.usb)&

if [ -d /mnt/user/init.d ]
then
    echo "OpenLGTV_BCM-INFO: executing custom init scripts from /mnt/user/init.d/" | tee -a /var/log/OpenLGTV_BCM.log
    for scr_file in /mnt/user/init.d/*
    do
	echo "OpenLGTV_BCM-INFO: executing $scr_file ..." | tee -a /var/log/OpenLGTV_BCM.log
	$scr_file
    done
fi

echo "OpenLGTV_BCM-INFO: start httpd" | tee -a /var/log/OpenLGTV_BCM.log
httpd -h /var/www | tee -a /var/log/OpenLGTV_BCM.log

echo "OpenLGTV_BCM-INFO: start RELEASE" | tee -a /var/log/OpenLGTV_BCM.log
echo ""

/lg/lgapp/RELEASE 0

/bin/sh

echo "OpenLGTV_BCM-INFO: Done...login now" | tee -a /var/log/OpenLGTV_BCM.log
echo ""






else

# default, (almost) original rcS script execution for compatibility with other 'auto' CFE modes

# mount partitons (/etc/fstab)
mount -a
#mount --bind /mnt/flash/data	/mnt/lg/recdb

export HOOK_SEGV=YES
export LOG_CALLER=YES
export LOAD_SYM=1
export OSAMEM_SIZE=0x200000

# MTD part index
PART_LGAPP_IDX=6

# Check lgapplication auto-run
AUTORUN=`cat /proc/cmdline | grep autorun`

if [ "$AUTORUN" != "" ]; then

	# lgapp mount parameters
	XIPADDR=`cat /proc/xipfs`

	if [ "$XIPADDR" != "" ] && [ "$XIPADDR" != "0x0" ]; then
		mount -t cramfs -o physaddr=$XIPADDR lgapp /mnt/lg/lgapp
	else
		mount -t squashfs /dev/mtdblock$PART_LGAPP_IDX /mnt/lg/lgapp
	fi

	export LD_LIBRARY_PATH=/mnt/lg/res/lgres
	touch  /mnt/flash/data/resolv.conf

	# we will remove this code, when btusb.ko is built in kernel.
	if [ -e /mnt/lg/res/lgres/btusb.ko ]; then
		insmod /mnt/lg/res/lgres/btusb.ko
	fi
	
	if [ -e /lg/lgapp/wl.ko ]; then
		insmod /lg/lgapp/wl.ko
	fi	

	ifconfig lo 127.0.0.1 netmask 255.0.0.0
	#ifconfig eth0 192.168.0l.1 netmask $NETMASK up
	#route add default gw $GATEWAY

	if [ -e /lg/lgapp/NetworkManager ]; then
		/lg/lgapp/NetworkManager -d
	fi	

	if [ -e /lg/lgapp/rcS.bb ]; then
		source /lg/lgapp/rcS.bb
	fi

	cd /lg/lgapp; ./RELEASE
fi

#
# Network parameters
#
mkdir /var/run /var/log
cat /dev/null > /var/run/utmp
cat /dev/null > /var/log/wtmp
chgrp utmp /var/run/utmp /var/log/wtmp
chmod 0664 /var/run/utmp /var/log/wtmp

TARGET_IP=$(cat /proc/cmdline | awk 'BEGIN { RS="[ :]"; FS="="; } /ip=/ { print $2 } END {}')
SERVER_IP=$(cat /proc/cmdline | awk 'BEGIN { RS="[ ]"; FS=":"; } /ip=/ { print $2 } END {}')
GATEWAY=$(cat /proc/cmdline | awk 'BEGIN { RS="[ ]"; FS=":"; } /ip=/ { print $3 } END {}')
NETMASK=$(cat /proc/cmdline | awk 'BEGIN { RS="[ ]"; FS=":"; } /ip=/ { print $4 } END {}')

#
# Network setting
#
ifconfig lo 127.0.0.1 netmask 255.0.0.0
ifconfig eth0 $TARGET_IP netmask $NETMASK up
route add default gw $GATEWAY
echo "start services"
portmap &
telnetd &
hostname bcm35xx

if [ -e /lg/lgapp/NetworkManager ]; then
	/lg/lgapp/NetworkManager -d
fi	

mount -t tmpfs none /usr/etc
cp /etc/passwd.org /usr/etc/passwd

#
# Mount nfs
#
if [ "$AUTORUN" == "" ]; then
	sleep 3
	let i=0
	while [ $i != 5 ]
	do
		ping -c 1 $GATEWAY > /dev/null 2>&1
		if [ $? -eq 0 ]; then
			break;
		fi
		usleep 10000
	done
	echo "Server IP=$SERVER_IP Target IP=$TARGET_IP"
	#echo "Mounting /share/global_platform as /home"
	echo "Mounting /share/global_platform/bcm35xx as /home"
	mount -t nfs -o rsize=32768,wsize=32768,tcp,nolock $SERVER_IP:/share/global_platform/bcm35xx /home
	echo "Mount-binding /home as /mnt/lg/lgapp"
	mount --bind /home /mnt/lg/lgapp

	USER_LIST=$(ls /home)

	echo "Creating user list"
	for SERVER_USER in $USER_LIST
	do
		if [ -d /home/$SERVER_USER ] && [ $SERVER_USER != root ]; then
			echo "$SERVER_USER::0:0:$SERVER_USER:/home/$SERVER_USER:/bin/sh" >> /usr/etc/passwd
		fi
	done
fi

export TERM=vt100
export ADDON_SYS_PATH=/mnt/addon
export ADDON_RES_PATH=/mnt/lg/res/lgfont
export ADDON_APP_CTRL=addon_mgr
export ADDON_APP_BATCH_LIST=addon_mgr.bat
export FLASH_APP_NAME=/mnt/addon/stagecraft/bin/stagecraft
export FLASH_YOUTUBE_PATH=/mnt/addon/contents/youtube/exec_youtube.swf
export FLASH_PICASA_PATH=/mnt/addon/contents/picasa/exec_picasa.swf
export FLASH_EMANUAL_PATH=/mnt/addon/contents/emanual/emmanager.swf
export ADDON_PRELOADED_PATH=/mnt/addon/contents
export HOME=/home
export DEPLOY_DIR=/mnt/browser


echo "Done...login now"
echo ""


fi
